/**
 * MinWin.h is intended as an alternative for windows.h which does not define
 * function-like macros which often break code.
 *
 * Each macro which is undefined by MinWin.h is preserved in some manner. Most
 * macros are re-defined as templated functions, such that code which uses
 * them does not break.
 *
 * Macros which cannot be automatically translated are re-defined with the
 * `WINDOWS_` prefix.
 *
 * This file (MinWin_in.cpp) is used as an input to MinWin.py. It is first
 * preprocessed as-is, to collect information about the #defines generated by
 * <windows.h>, and then is used as a template to create the real MinWin.h file
 * in the build directory.
 *
 * MINWIN_PREPROCESSING is defined when it is being preprocessed.
 */

#ifndef mozilla_MinWin_h
#define mozilla_MinWin_h

#include <windows.h>

// The following methods shouldn't be #undef-ed and wrapped by MinWin.h.
// #undef them when MINWIN_PREPROCESSING is set to avoid MinWin.py seeing them.
#ifdef MINWIN_PREPROCESSING
# undef GetExceptionInformation // Has to be a macro (callsite-sensitive intrinsic)
# undef GetExceptionCode // Has to be a macro (callsite-sensitive intrinsic)
# undef GetScode // Doesn't expand to valid code
# undef PreFetchCacheLine // Has to be a macro (callsite-sensitive intrinsic)

# undef GetSystemWow64Directory2 // Not handled well by MinWin expanding logic
# undef LookupAccountNameLocal // Not handled well by MinWin expanding logic
# undef LookupAccountSidLocal // Not handled well by MinWin expanding logic
# undef DeviceCapabilities // Not handled well by MinWin expanding logic
#endif // defined(MINWIN_PREPROCESSING)

// Requirements to use the computed definitions:
//  - We must be building C++ and not C
//  - We aren't currently collecting info about windows.h
//  - We must have not changed _WIN32_WINNT in this compilation unit
//  - We are going to be part of libxul (MOZILLA_INTERNAL_API)
#if defined(__cplusplus) && !defined(MINWIN_PREPROCESSING) && \
    _WIN32_WINNT == _MINWIN_WINVER && defined(MOZILLA_INTERNAL_API)

#include "mozilla/Move.h"

namespace {

// Helper used to extract the types of arguments of functions for the
// purposes of implementing forwarding functions. The ARG macro is also
// defined in this header to make the code more terse.
template<size_t idx, typename T>
struct minwinFnArg {};
template<typename R, typename F, typename... Args>
struct minwinFnArg<0, R(F, Args...)> {
    typedef F Type;
};
template<size_t idx, typename R, typename F, typename... Args>
struct minwinFnArg<idx, R(F, Args...)>
    : minwinFnArg<idx - 1, R(Args...)>
{};
#define ARG(fn, idx) typename minwinFnArg<idx, decltype(fn)>::Type

#ifdef UNICODE
# define UNICODE_SUFFIXED(name) name ## W
#else
# define UNICODE_SUFFIXED(name) name ## A
#endif

#ifdef _MSC_VER
# pragma warning(push)
# pragma warning(disable : 4995 4996) // Silence deprecated errors
#endif

_MINWIN_H_SUBST_POINT

#ifdef _MSC_VER
# pragma warning(pop)
#endif

#undef ARG
#undef UNICODE_SUFFIXED

} // anonymous namespace

#endif // defined(__cplusplus) && !defined(MINWIN_PREPROCESSING) &&
       // _WIN32_WINNT == _MINWIN_WINVER && defined(MOZILLA_INTERNAL_API)

#endif // !defined(mozilla_MinWin_h)
